<?php
/**
Plugin Name: Email Post Approval
Description: Review and approve posts for publishing right from your inbox
Version: 2.0
Author: travislopes, mcinvale
Author URI: http://binarym.com/
License: GPL2
 */

class Email_Post_Approval {

	/**
	 * Instance of Share Drafts Publicly class
	 *
	 * @var    object
	 * @access private
	 * @static
	 */
	private static $_instance = null;

	/**
	 * Get instance of this class.
	 *
	 * @access public
	 * @static
	 * @return $_instance
	 */
	public static function get_instance() {

		if ( null === self::$_instance ) {
			self::$_instance = new self;
		}

		return self::$_instance;

	}

	/**
	 * Register needed hooks.
	 *
	 * @since  1.0
	 * @access public
	 */
	public function __construct() {

		register_activation_hook( __FILE__, array( 'Email_Post_Approval', 'activation' ) );
		register_deactivation_hook( __FILE__, array( 'Email_Post_Approval', 'deactivation' ) );

		add_action( 'save_post', array( $this, 'send_email' ) );
		add_action( 'init', array( $this, 'approve_post' ), 0);

	}





	// # APPROVAL EMAIL ------------------------------------------------------------------------------------------------

	/**
	 * Send post approval email.
	 *
	 * @since  1.0
	 * @access public
	 *
	 * @param int $post_id Post ID to send approval email for.
	 *
	 * @uses Email_Post_Approval::generate_hash()
	 */
	public function send_email( $post_id = 0 ){

		// If this is an auto-save post, exit.
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return;
		}

		// Get post.
		$post = get_post( $post_id );

		// If post could not be found, exit.
		if ( ! $post ) {
			return;
		}

		// If this is a revision post, exit.
		if ( 'revision' === $post->post_type ) {
			return;
		}

		// Get post statuses that require approval.
		$approval_statuses = get_option( 'epa_post_statuses' );

		// If post is not a status that requires approval, exit.
		if ( ! in_array( $post->post_status, $approval_statuses ) ) {
			return;
		}

		// Get default author, post author, meta and taxonomies.
		$default_author  = get_userdata( get_option( 'epa_default_author' ) );
		$post_author     = get_userdata( $post->post_author );
		$post_meta       = get_post_meta( $post->ID );
		$post_taxonomies = get_the_taxonomies( $post->ID, array( 'template' => '%l' ) );

		// Get post fields to display.
		$fields_to_display = get_option( 'epa_email_fields' );

		// Initialize message.
		$message = '';

		// Loop through email fields and generate message.
		foreach ( $fields_to_display as $field ) {

			switch ( $field ) {

				case 'body':
					$message .= '<br/><strong>Post Body:</strong><br />';
					$message .= str_replace( '<!--more-->', '&lt;!--more--&gt;', $post->post_content );
					$message .= '<br />';
					break;

				case 'categories':
					$message .= '<strong>Categories:</strong> ';
					$message .= isset( $post_taxonomies['category'] ) ? $post_taxonomies['category'] : 'None';
					break;

				case 'post_author':
					$message    .= '<strong>Author:</strong> ' . esc_html( $post_author->display_name ) . '<br />';
					break;

				case 'post_date':
					$message .= '<strong>Post Date:</strong> ' . esc_html( $post->post_date ) . '<br />';
					break;

				case 'post_meta':

					$message .= '<br /><strong>Post Meta:</strong><br />';

					foreach ( $post_meta as $key => $value ) {

						// If this is a hidden meta key, skip it.
						if ( 0 === strpos( $key, '_' ) ) {
							continue;
						}

						// Prepare meta value.
						if ( is_array( $value ) ) {
							$value = implode( ', ', $value );
						}

						// Display meta value.
						$message .= esc_html( $key ) . ': ' . esc_html( $value ) . '<br />';

					}

					break;

				case 'tags':
					$message .= '<strong>Tags:</strong> ';
					$message .= isset( $post_taxonomies['post_tag'] ) ? $post_taxonomies['post_tag'] : 'None';
					break;

				case 'thumbnail':
					$message .= '<strong>Featured Image:</strong><br />' . get_the_post_thumbnail( $post->ID, 'medium' ) . '<br /><br />';
					break;

				case 'title':
					$message .= '<strong>Title:</strong> ' . esc_html( $post->post_title ) . '<br />';
					break;

			}

		}

		// Add footer divider.
		$message .= '<br />----------------------------------------------------<br />';

		// Prepare base approval URL.
		$approval_url = add_query_arg(
			array(
				'approve_post' => true,
				'approve_key'  => $this->generate_hash( $post->ID ),
			),
			get_bloginfo( 'url' )
		);

		// Add approval links.
		$message .= sprintf(
			esc_html__( '%sApprove as %s%s or %sapprove as %s%s.', 'email-post-approval' ),
			'<a href="' . esc_url( $approval_url ) . '">',
			esc_html( $post_author->display_name ),
			'</a>',
			'<a href="' . esc_url( add_query_arg( array( 'default_author' => 'true' ), $approval_url ) ) . '">',
			esc_html( $default_author->display_name ),
			'</a>'
		);

		// Add disclaimer.
		$message .= '<br />' . esc_html__( 'This email was generated by the Email Post Approval plugin.', 'email-post-approval' );

		// Prepare email headers.
		$email_headers = array(
			'From: "' . get_bloginfo( 'name' ) . '" <' . get_bloginfo( 'admin_email' ) . '>',
			'Reply-To: ' . $post_author->user_email,
		);

		// Prepare email subject.
		$email_subject = 'Post Needing Approval: ' . esc_html( $post->post_title );

		// Prepare email to.
		$email_to = get_option( 'epa_send_to' );
		$email_to = explode( ',', $email_to );
		$email_to = array_map( 'sanitize_email', $email_to );

		// Set email content type.
		add_filter( 'wp_mail_content_type', function() { return 'text/html'; } );

		// Send email.
		wp_mail( $email_to, $email_subject, $message, $email_headers );

	}





	// # POST APPROVAL -------------------------------------------------------------------------------------------------

	/**
	 * Approve post for publishing.
	 *
	 * @since  2.0
	 * @access public
	 */
	public function approve_post() {

		// If "approve_post" argument is not defined, return.
		if ( ! isset( $_GET['approve_post'] ) ) {
			return;
		}

		// Get approval key.
		$approval_key = isset( $_GET['approve_key'] ) ? sanitize_text_field( $_GET['approve_key'] ) : false;

		// If no approval key was provided, exit.
		if ( ! $approval_key ) {
			wp_die( esc_html__( 'You must provide a post approval key.', 'email-post-approval' ) );
		}

		// Get default author state.
		$default_author = isset( $_GET['default_author'] ) && 'true' == $_GET['default_author'];

		// Get post to approve.
		$post = get_posts(
			array(
				'meta_key'       => '_epa-approve_key',
				'meta_value'     => $approval_key,
				'posts_per_page' => 1,
				'post_status'    => 'any',
			)
		);

		// If post was not found, exit.
		if ( ! $post || empty( $post ) ) {
			wp_die( esc_html__( 'The post you are attempting to approve could not be found.', 'email-post-approval' ) );
		}

		// Reset post.
		$post = $post[0];

		// Set post status to future.
		$post->post_status = 'future';

		// Change post author to default author.
		if ( $default_author ) {

			// Get default author.
			$author = get_option( 'epa_default_author' );

			// Set post author.
			if ( $author ) {
				$post->post_author = sanitize_text_field( $author );
			}

		}

		// Save post.
		wp_update_post( $post );

		// Remove approval key.
		delete_post_meta( $post->ID, '_epa-approve_key' );

		// Redirect to post.
		wp_redirect( get_permalink( $post->ID ) );
		exit();

	}




	// # HELPER METHODS ------------------------------------------------------------------------------------------------

	/**
	 * Generate secret post approval key.
	 *
	 * @since  1.0
	 * @access private
	 *
	 * @param int $post_id Post ID to generate approval key for.
	 *
	 * @return string
	 */
	private function generate_hash( $post_id = 0 ){

		// Check for existing hash.
		$existing_hash = get_post_meta( $post_id, '_epa-approve_key', true );

		// If hash exists, return it.
		if ( $existing_hash ) {
			return $existing_hash;
		}

		// Generate hash.
		$hash = sha1( $post_id * time() );

		// Save hash to post meta.
		update_post_meta( $post_id, '_epa-approve_key', $hash );

		return $hash;

	}





	// # INSTALLATION --------------------------------------------------------------------------------------------------

	/**
	 * Define initial settings upon activation.
	 *
	 * @since  1.0
	 * @access public
	 */
	public static function activation() {

		// Add default send to address.
		if ( ! get_option( 'epa_send_to' ) ) {
			add_option( 'epa_send_to', sanitize_email( get_bloginfo( 'admin_email' ) ) );
		}

		// Add default post statuses to cause Email Post Approval.
		if ( ! get_option( 'epa_post_statuses' ) ) {
			add_option( 'epa_post_statuses', array( 'pending' ) );
		}

		// Add default fields to display in post approval email.
		if ( ! get_option( 'epa_email_fields' ) ) {
			add_option( 'epa_email_fields', array( 'title', 'post_author', 'post_date', 'categories', 'tags', 'post_meta', 'body', 'thumbnail' ) );
		}

	}





	// # UNINSTALL -----------------------------------------------------------------------------------------------------

	/**
	 * Remove settings upon deactivation.
	 *
	 * @since  1.0
	 * @access public
	 */
	public static function deactivation() {

		delete_option( 'epa_send_to' );
		delete_option( 'epa_post_statuses' );
		delete_option( 'epa_email_fields' );

	}

}

Email_Post_Approval::get_instance();
